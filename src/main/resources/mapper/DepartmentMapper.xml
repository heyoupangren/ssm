<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cwh.ssm.mapper.DepartmentMapper">
   <!-- 引用缓存：namespace:指定和哪个命名空间下的缓存一样
    <cache-ref namespace="com.cwh.ssm.mapper.DepartmentMapper"></cache-ref>

     public Department getDeptById(Integer id);
    <select id="getDeptById" resultType="com.cwh.mybatis.beans.Department">
        select * from table_department where id=#{id}
    </select>

    public Department getDeptAndEmp(Integer id);
    <resultMap id="MyDept" type="com.cwh.mybatis.beans.Department">
        <id column="departmentId" property="id"/>
        <result column="department_name" property="departmentName"/>
        collection定义关联集合类型的属性的封装规则
            ofType：指定集合里面元素的类型
    <collection property="employees" ofType="com.cwh.mybatis.beans.Employee">
        <id column="employeeId" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </collection>
    </resultMap>
    <select id="getDeptAndEmp" resultMap="MyDept">
    select table_department.id as departmentId,department_name,table_employee.id as employeeId,last_name,gender,email
        from table_department,table_employee
        where table_department.id =table_employee.department_id
        and table_department.id=#{id};
    </select>

    <resultMap id="MyDeptStep" type="com.cwh.mybatis.beans.Department">
        <id column="id" property="id"/>
        <result column="department_name" property="departmentName"/>
        <collection property="employees"
                    select="com.cwh.mybatis.dao.EmployeeMapperPlus.getEmpByDespId"
                    column="{departmentId=id}" fetchType="lazy">

        </collection>
    </resultMap>
    public Department getDeptByIdStep(Integer id);
    <select id="getDeptByIdStep" resultMap="MyDeptStep">
        select * from table_department where id=#{id};
    </select>

    扩展：多列的值传递过去
        将多列的值封装map传递；
        column="{key1=column1,key2=column2}"
        fetchType="lazy":表示使用延迟加载
                -lazy：延迟
                -eager：立即
-->
</mapper>